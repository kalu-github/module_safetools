apply plugin: rootProject.ext.plugin.com_android_library

android {

    namespace 'lib.kalu.tool'
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {

        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters rootProject.ext.plugin.armeabi_v7a
        }

        externalNativeBuild {
            cmake {
                //  arguments '-DANDROID_STL=gnustl_static'
                cppFlags "-std=c++14", "-fno-exceptions", "-O2"
                // cppFlags "-std=c++14", "-frtti -fexceptions", "-O2"
                // cppFlags "-frtti -fexceptions"
                abiFilters rootProject.ext.plugin.armeabi_v7a
            }
        }

        //添加此行
        flavorDimensions "default"
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            def type = new String(buildType.name).toLowerCase()
            def time = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
            outputFileName = "lib_safetools_jni_" + type + "_" + time + ".aar"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled false
            shrinkResources false
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard/proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            zipAlignEnabled false
            shrinkResources false
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard/proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets.main {
        jni.srcDirs = []
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation rootProject.ext.dependencies.support_activity
}